#!/usr/bin/env python

##############################################################
#
# This script is initiated by a daemon that communicates with the data submission on NiftyWeb.
#
# Two NIfTI files are required: an initial scan (image 1) and a re-scan without repositioning (image 2).
#
# It is executed in the following way:
#
#    python PATH_OF_THIS_SCRIPT/WMGM <data ID> <image 1> <image 2>
#
# Author: Stephanie Alley, Julien Cohen-Adad
# Copyright: see:
#
##############################################################

import sys, os, shutil, subprocess, time
import numpy as np
import pandas as pd


class Param:
    def __init__(self):
        parameters = sys.argv[:]
        
        self.program = os.path.basename(parameters[0])
        self.num = parameters[1]
        self.file_1 = parameters[2]
        self.file_2 = parameters[3]
        self.dir_data = os.path.dirname(parameters[2])

def main():
    program = param.program
    num = param.num
    file_1 = param.file_1
    file_2 = param.file_2
    dir_data = param.dir_data

    # Send email notification of request
    mail = 'mutt -s "Request received for {}" stephanie.j.alley@gmail.com,jcohen@polymtl.ca,f.carrasco@ucl.ac.uk < /dev/null'.format(num)
    subprocess.check_call(mail, shell=True)
    
    # Initiate processing script
    subprocess.call(["python", "/home/niftyweb_sct/gm_challenge/process_data.py", num, file_1, file_2])

    # Check for output files to return to user
    final_txt = os.path.join(dir_data + '/' + num + '_' + program + '.txt')
    final_zip = os.path.join(dir_data + '/' + num + '_' + program + '.zip')

    if (os.path.isfile(final_txt)) and (os.path.isfile(final_zip)):
	exit()

    done = 0
    while(done == 0):
        if (os.path.isfile(final_txt)) and (os.path.isfile(final_zip)):
            done = 1
        else:
            time.sleep(60)

if __name__ == "__main__":
    param = Param()
    main()
