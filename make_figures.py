#!/usr/bin/env python
#
# Make figures to assess metrics sensitivity to image quality. Run after process_folder.py
#
# USAGE:
# The script should be launched using SCT's python:
#   PATH_GMCHALLENGE="PATH TO THIS REPOSITORY"
#   ${SCT_DIR}/python/bin/python ${PATH_GMCHALLENGE}make_figures.py -i results_all.csv
#
# OUTPUT:
# Figs
#
# Authors: Julien Cohen-Adad
# License: https://github.com/neuropoly/gm_challenge/blob/master/LICENSE

import os, sys
import argparse
import numpy as np
import nibabel as nib
import scipy.ndimage as ndimage
# append path to useful SCT scripts
path_sct = os.getenv('SCT_DIR')
sys.path.append(os.path.join(path_sct, 'scripts'))
import sct_utils as sct
from msct_image import Image
from spinalcordtoolbox.metadata import read_label_file, parse_id_group
import pandas as pd
import matplotlib.pyplot as plt

def get_parameters():
    parser = argparse.ArgumentParser(description='Make figures to assess metrics sensitivity to image quality. Run '
                                                 'after process_folder.py')
    parser.add_argument("-i", "--input",
                        help="CSV file generated by process_folder.py.",
                        required=True)
    args = parser.parse_args()
    return args


def main():
    sct.init_sct()  # start logger
    # default params

    # Read CSV
    results_all = pd.read_csv(file_csv)

    # plot fig
    data1 = results_all.query('Noise == 0 & Smooth == 0')['Contrast'].tolist()
    data2 = results_all.query('Noise == 5 & Smooth == 0')['Contrast'].tolist()
    data3 = results_all.query('Noise == 10 & Smooth == 0')['Contrast'].tolist()

    N=3

    fig, ax = plt.subplots()

    ind = np.arange(N)  # the x locations for the groups
    width = 0.25  # the width of the bars
    p1 = ax.bar(ind - width, data1, width, color='r')
    p2 = ax.bar(ind, data2, width, color='y')
    p3 = ax.bar(ind + width, data3, width, color='b')

    ax.set_title('Contrast')

    ax.set_xlabel('Noise')
    ax.set_xticks(ind + width / 2)
    ax.set_xticklabels(('0', '5', '10'))

    ax.legend((p1[0], p2[0], p3[0]), ('GM=50', 'GM=75', 'GM=100'))
    ax.set_ylabel('Contrast')
    plt.grid(axis='y')

    ax.autoscale_view()

    plt.savefig('fig_contrast.png')
    #


if __name__ == "__main__":
    args = get_parameters()
    file_csv = args.input
    main()
